/account:
    displayName: User Account
    description: |
        Metadata of the user-Account
        * * *
        ####Dev
        The accountTypeId field seems to not be represented in the db-schema.
        To account for the future "premium" functions, this should not be
        handled with a boolean company flag
    get:
        is: [secured]
        securedBy: [sessionToken]
        displayName: Get account metadata
        responses:
            200:
                body:
                    application/json:
                        example: !include account-get-200.json
                        schema: !include account-get-200.cson

    put:
        is: [secured]
        securedBy: [sessionToken]
        displayName: Edit account metadata
        description: |
            ####Dev
            Reto:
            - should this be protected by password instead of token?
            - only send updates or the whole body?
        body:
            application/json:
                example: !include account-put-body.json
                schema: !include account-put-body.cson
        responses:
            204:
                description: Succesfully updated user
    post:
        displayName: Create a new Account
        body:
            application/json:
              example: !include account-post-body.json
              schema: !include account-post-body.cson
        responses:
            201:
                description: Successfully created user
            400:
                description: User Creation has failed
                body:
                    application/json:
                        example: !include account-post-400.json
                        schema: |
                            fieldErrors: [ 'FieldError' ]
                            errors: [ 'Error' ]


    delete:
        displayName: Delete Account
        description: |
            ####Dev
            Reto: should this be a delete method? delete methods with body
            [are tricky](http://stackoverflow.com/questions/299628/is-an-entity-body-allowed-for-an-http-delete-request)

        is: [secured]
        securedBy: [sessionToken]
        body:
            application/json:
                example: |
                    {
                        "password": "xyz"
                    }
                schema: |
                    password: 'string'
        responses:
            204:
                description: Succesfully deleted resource


/password:
    is: [secured]
    securedBy: [sessionToken]
    displayName: Account Password
    put:
        description: "Changes password"
        body:
            application/json:
                example: |
                    {
                        "oldPassword": "test1234",
                        "newPassword": "VeRyS4ure1!"
                    }
                schema: |
                    oldPassword: 'string'
                    newPassword: 'string'
        responses:
            204:
                description: Successfully changed password

/logins:
    is: [secured]
    securedBy: [sessionToken]
    displayName: User Logins
    description: |
        Manage additional logins of an account
        * * *
        ####Dev
        - roles must be defined.
        - single name field enough? Or even none?

    get:
        displayName: Get all logins of the account
        responses:
            200:
                body:
                    application/json:
                        example: |
                            [
                                {
                                    "name": "Reto Schläpfer",
                                    "email": "test@bla.ch",
                                    "role": "restricted_user"
                                }
                            ]
                        schema: |
                            [
                                {
                                    name: 'string',
                                    email: 'string',
                                    role: 'string'
                                }
                            ]
    post:
        displayName: Create a new login
        responses:
            201:
                body:
                    application/json:
                        example: |
                            [
                                {
                                    "name": "Reto Schläpfer",
                                    "email": "test@bla.ch",
                                    "password": "pwd1234",
                                    "role": "restricted_user"
                                }
                            ]
                        schema: |
                            [
                                {
                                    name: 'string',
                                    email: 'string',
                                    role: 'string',
                                    password: 'string'
                                }
                            ]
    /{loginId}:
        is: [secured]
        securedBy: [sessionToken]
        displayName: One Login
        delete:
            description: Delete login
            responses:
                204:
                  description: Successfully deleted login

        put:
            description: Edit login
            responses:
                204:
                    body:
                        application/json:
                            example: |
                                [
                                    {
                                        "name": "Reto Schläpfer",
                                        "email": "test@bla.ch",
                                        "role": "restricted_user"
                                    }
                                ]
                            schema: |
                                [
                                    {
                                        name: 'string',
                                        email: 'string',
                                        role: 'string'
                                    }
                                ]

        /password:
            is: [secured]
            securedBy: [sessionToken]
            displayName: Login Password
            put:
                displayName: "Changes password of login"
                body:
                    application/json:
                        example: |
                            {
                                "oldPassword": "test1234",
                                "newPassword": "VeRyS4ure1!"
                            }
                        schema: |
                            oldPassword: 'string'
                            newPassword: 'string'
                responses:
                    204:
                        description: Successfully changed password

/balance:
    is: [secured]
    securedBy: [sessionToken]
    description: money balance

/reminders:
    is: [secured]
    securedBy: [sessionToken]
    description: Manage reminders

/badges:
    is: [secured]
    securedBy: [sessionToken]
    displayName: User Badges
    get:
        description: Get a list of all badges
    post:
        description: Order/Register new badge

    /{badgeId}:
        is: [secured]
        securedBy: [sessionToken]
        description: Manage a single badge
        put:
            description: Update badge
        delete:
            description: Delete badge


/license-plates:
    is: [secured]
    securedBy: [sessionToken]
    displayName: User License Plates
    get:
        displayName: Get a list of all license plates
        responses:
            200:
                body:
                    application/json:
                        example: |
                            [
                                {
                                    "licensePlateId": 12354,
                                    "licensePlateNr": "ZH727222",
                                    "vignetteNrs": [
                                        "23492302349"
                                    ],
                                    "changeablePlate": false,
                                    "licensePlateTypeId": 1,
                                    "licensePlateCountryId": 3
                                }
                            ]
                        schema: |
                            [
                                {
                                    licensePlateId: 'integer',
                                    licensePlateNr: 'string',
                                    vignetteNrs: ['string'],
                                    changeablePlate: 'boolean',
                                    licensePlateTypeId: 'integer',
                                    licensePlateCountryId: 'integer'
                                }
                            ]

    post:
        displayName: Order/Register a new license plate
        body:
            application/json:
                example: |
                    {
                        "licensePlateNr": "ZH727222",
                        "vignetteNrs": [
                            "23492302349"
                        ],
                        "changeablePlate": false,
                        "licensePlateTypeId": 1,
                        "licensePlateCountryId": 3
                    }
                schema: |
                    licensePlateNr: 'string'
                    vignetteNrs: ['string']
                    changeablePlate: 'boolean'
                    licensePlateTypeId: 'integer'
                    licensePlateCountryId: 'integer'
        responses:
            201:
                description: "Successfully created license plate"


    /{licensePlateId}:
        is: [secured]
        securedBy: [sessionToken]
        displayName: One User License Plate
        put:
            displayName: Update license plate
            body:
                application/json:
                    example: |
                        {
                            "licensePlateNr": "ZH727222",
                            "vignetteNrs": [
                                "23492302349"
                            ],
                            "changeablePlate": false,
                            "licensePlateTypeId": 1,
                            "licensePlateCountryId": 3
                        }
                    schema: |
                        licensePlateNr: 'string'
                        vignetteNrs: ['string']
                        changeablePlate: 'boolean'
                        licensePlateTypeId: 'integer'
                        licensePlateCountryId: 'integer'
            responses:
                204:
                    description: Successfully updated license plate
        delete:
            displayName: Unlink license plate from user
            description: |
                ####Dev
                Is delete smart here?
            responses:
                204:
                    description: Successfully unlinke license plate

/permits:
    displayName: Permits
    /badge:
        displayName: Badge-Permits
        is: [secured]
        securedBy: [sessionToken]
        post:
            description: Buy A new badge permit charged to the account
        get:
            description: Get active permits

        /history:
            is: [secured]
            securedBy: [sessionToken]
            get:
                description: Get history of all purchased badge permits
    /license-plate:
        is: [secured]
        securedBy: [sessionToken]
        displayName: License-Plate-Permits
        post:
            description: Buy A new license-plate permit charged to the account
        get:
            description: Get active permits

        /history:
            is: [secured]
            securedBy: [sessionToken]
            get:
                description: Get history of all purchased badge permits
/transactions:
    description: Manage user transactions
    /badge:
        description: badge transactions
        is: [secured]
        securedBy: [sessionToken]
        get:
            description: Active badge transactions
        /history:
            is: [secured]
            securedBy: [sessionToken]
            get:
                description: Get a history of all transactions
    /license-plate:
        description: license-plate transactions
        is: [secured]
        securedBy: [sessionToken]
        get:
            description: Active license-plate transactions
        post:
            description: start a new license-plate transaction
        patch:
            description: stop a license plate transaction

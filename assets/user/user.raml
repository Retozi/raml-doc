/account:
    displayName: User Account Metadata
    description: |
        ####Dev
        The accountTypeId field seems to not be represented in the db-schema.
        To account for the future "premium" functions, this should not be
        handled with a boolean company flag
    get:
        is: [secured]
        securedBy: [sessionToken]
        displayName: Get account metadata
        responses:
            200:
                body:
                    application/json:
                        example: !include account-get-200.json
                        schema: !include account-get-200.cson

    put:
        is: [secured, error-body-returning]
        securedBy: [sessionToken]
        displayName: Edit account metadata
        description: |
            ####Dev
            Reto:
            - should this be protected by password instead of token?
            - only send updates or the whole body?
        body:
            application/json:
                example: !include account-put-body.json
                schema: !include account-put-body.cson
        responses:
            204:
                description: Successfully updated user
    post:
        is: [error-body-returning]
        displayName: Create a new Account
        body:
            application/json:
              example: !include account-post-body.json
              schema: !include account-post-body.cson
        responses:
            201:
                description: Successfully created user


    delete:
        is: [secured, error-body-returning]
        securedBy: [sessionToken]
        displayName: Delete Account
        body:
            application/json:
                example: |
                    {
                        "password": "xyz"
                    }
                schema: |
                    password: 'string'
        responses:
            204:
                description: Successfully deleted resource


/logins:
    type: user-collection
    displayName: User Logins
    description: |
        Manage additional logins of an account
        * * *
        ####Dev
        - roles must be defined.
        - single name field enough? Or even none?

    get:
        responses:
            200:
                body:
                    application/json:
                        example: |
                            [
                                {
                                    "name": "Reto Schläpfer",
                                    "email": "test@bla.ch",
                                    "role": "restricted_user"
                                }
                            ]
                        schema: |
                            [
                                {
                                    name: 'string',
                                    email: 'string',
                                    role: 'string'
                                }
                            ]
    post:
        responses:
            201:
                body:
                    application/json:
                        example: |
                            [
                                {
                                    "name": "Reto Schläpfer",
                                    "email": "test@bla.ch",
                                    "password": "pwd1234",
                                    "role": "restricted_user"
                                }
                            ]
                        schema: |
                            [
                                {
                                    name: 'string',
                                    email: 'string',
                                    role: 'string',
                                    password: 'string'
                                }
                            ]
    /{loginId}:
        type: user-collection-item
        put:
            responses:
                204:
                    body:
                        application/json:
                            example: |
                                [
                                    {
                                        "name": "Reto Schläpfer",
                                        "email": "test@bla.ch",
                                        "role": "restricted_user"
                                    }
                                ]
                            schema: |
                                [
                                    {
                                        name: 'string',
                                        email: 'string',
                                        role: 'string'
                                    }
                                ]
        delete:

        /password:
            displayName: Login Password
            is: [secured, error-body-returning]
            securedBy: [sessionToken]
            put:
                displayName: "Changes password"
                body:
                    application/json:
                        example: |
                            {
                                "oldPassword": "test1234",
                                "newPassword": "VeRyS4ure1!"
                            }
                        schema: |
                            oldPassword: 'string'
                            newPassword: 'string'
                responses:
                    204:
                        description: Successfully changed password

/balance:
    is: [secured]
    securedBy: [sessionToken]
    description: money balance

/reminders:
    is: [secured]
    securedBy: [sessionToken]
    description: Manage reminders

/badges:
    type: user-collection
    displayName: User Badges
    get:
        description: Get a list of all badges
    post:
        description: Order/Register new badge

    /{badgeId}:
        type: user-collection-item
        displayName: One User Badge


/license-plates:
    type: user-collection
    displayName: User License Plates
    get:
        responses:
            200:
                body:
                    application/json:
                        example: |
                            [
                                {
                                    "licensePlateId": 12354,
                                    "licensePlateNr": "ZH727222",
                                    "vignetteNrs": [
                                        "23492302349"
                                    ],
                                    "changeablePlate": false,
                                    "licensePlateTypeId": 1,
                                    "licensePlateCountryId": 3
                                }
                            ]
                        schema: |
                            [
                                {
                                    licensePlateId: 'integer',
                                    licensePlateNr: 'string',
                                    vignetteNrs: ['string'],
                                    changeablePlate: 'boolean',
                                    licensePlateTypeId: 'integer',
                                    licensePlateCountryId: 'integer'
                                }
                            ]

    post:
        body:
            application/json:
                example: |
                    {
                        "licensePlateNr": "ZH727222",
                        "vignetteNrs": [
                            "23492302349"
                        ],
                        "changeablePlate": false,
                        "licensePlateTypeId": 1,
                        "licensePlateCountryId": 3
                    }
                schema: |
                    licensePlateNr: 'string'
                    vignetteNrs: ['string']
                    changeablePlate: 'boolean'
                    licensePlateTypeId: 'integer'
                    licensePlateCountryId: 'integer'


    /{licensePlateId}:
        type: user-collection-item
        put:
            body:
                application/json:
                    example: |
                        {
                            "licensePlateNr": "ZH727222",
                            "vignetteNrs": [
                                "23492302349"
                            ],
                            "changeablePlate": false,
                            "licensePlateTypeId": 1,
                            "licensePlateCountryId": 3
                        }
                    schema: |
                        licensePlateNr: 'string'
                        vignetteNrs: ['string']
                        changeablePlate: 'boolean'
                        licensePlateTypeId: 'integer'
                        licensePlateCountryId: 'integer'
        delete:


/badge-permits:
    type: user-collection
    displayName: Badge Permits
    post:
    get:
    /{badgePermitId}:
        type: user-collection-item

/license-plate-permits:
    type: user-collection
    displayName: License Plate Permits
    post:
    get:
    /{licensePlatePermitId}:
        type: user-collection-item

/badge-transactions:
    type: user-collection
    post:
    get:

/license-plate-transactions:
    type: user-collection
    post:
    get:
    /{licensePlateTransactionId}:
        type: user-collection-item
        patch:
            description: stop a license plate transaction
